package com.gabriel.postGram.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinTable;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "users")
public class User implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String login;
	private String password;
	private String name;
	private String lastName;
	private Long followersNumber;
	private Long followingNumber;

	@JsonIgnore
	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "follower", joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "follower_id", referencedColumnName = "id"))
	private List<User> followers = new ArrayList<>();

	@JsonIgnore
	@ManyToMany(mappedBy = "followers", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private List<User> following = new ArrayList<>();

	@JsonIgnore
	@OneToMany(mappedBy = "user")
	private List<Post> posts = new ArrayList<>();

	@JsonIgnore
	@OneToMany(mappedBy = "user")
	private List<Comment> comments = new ArrayList<>();

	public User() {
	}

	public User(Long id, String login, String password, String name, String lastName) {
		this.id = id;
		this.login = login;
		this.password = password;
		this.name = name;
		this.lastName = lastName;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getLogin() {
		return login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Long getFollowersNumber() {
		return (long) this.getFollowers().size();
	}

	public void setFollowersNumber(Long followersNumber) {
		this.followersNumber = followersNumber;
	}

	public Long getFollowingNumber() {
		return (long) this.getFollowing().size();
	}

	public void setFollowingNumber(Long followingNumber) {
		this.followingNumber = followingNumber;
	}

	public List<User> getFollowing() {
		return following;
	}


	public List<User> getFollowers() {
		return followers;
	}

	public List<Post> getPosts() {
		return posts;
	}

	public List<Comment> getComments() {
		return comments;
	}

	public void seguirUsuario(User usuarioASeguir) {
		this.getFollowing().add(usuarioASeguir);
		usuarioASeguir.getFollowers().add(this);
	}
	
	public void deixarDeSeguirUsuario(User usuarioASeguir) {
	    this.getFollowing().remove(usuarioASeguir);
	    usuarioASeguir.getFollowers().remove(this);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return Objects.equals(id, other.id);
	}
}
